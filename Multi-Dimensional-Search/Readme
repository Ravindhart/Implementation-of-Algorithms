PROJECT DESCRIPTION
In this project, multi dimensional search is implemented.

Consider the web site of a seller like Amazon. They carry tens of thousands of products, and each product
has many attributes (Name, Size, Description, Keywords, Manufacturer, Price, etc.).The search engine allows
users to specify attributes of products that they are seeking, and shows products that have most of those 
attributes. To make search efficient, the data is organized using appropriate data structures, such as 
balanced trees, and hashing. But, if products are organized by Name, how can search by price implemented
efficiently? The solution, called indexing in databases, is to create a new set of references to the objects
for each search field, and organize them to implement search operations on that field efficiently. 
As the objects change, these access structures have to be kept consistent.

In this project, each object has 3 attributes: id (long int), description (one or more long ints), 
and price (dollars and cents). The following operations are supported:

    Insert(id,price,description): insert a new item. If an entry with the same id already exists, 
    its description and price are replaced by the new values. If description is empty, then just
    the price is updated. Returns 1 if the item is new, and 0 otherwise.
    
    Find(id): return price of item with given id (or 0, if not found).
    
    Delete(id): delete item from storage. Returns the sum of the long ints that are in the description 
    of the item deleted (or 0, if such an id did not exist).
    
    FindMinPrice(n): given a long int n, find items whose description contains n (exact match with one
    of the long ints in the item's description), and return lowest price of those items.
    
    FindMaxPrice(n): given a long int n, find items whose description contains n, and return highest
    price of those items.
    
    FindPriceRange(n,low,high): given a long int n, find the number of items whose description contains n,
    and their prices fall within the given range, [low, high].
    
    PriceHike(l,h,r): increase the price of every product, whose id is in the range [l,h], by r% Discard 
    any fractional pennies in the new prices of items. Returns the sum of the net increases of the prices.
    
    Range(low, high): number of items whose price is at least "low" and at most "high".
    
    SameSame(): Find the number of items that satisfy all of the following conditions:
        The description of the item contains 8 or more numbers, and,
        The description of the item contains exactly the same set of numbers as another item. 
    This operation returns the number of items that satisfy both conditions. 

DESCRIPTION OF FILES
LP4Driver.java  - Driver program.
MDS.java - class which contains the operations of multi dimensional search
Item.java - class which represents an arc/edge of a graph
Timer - class for capturing times

INSTRUCTIONS TO EXECUTE THE FILES
1. Extract the archive and Copy all the source files to the required directory.
2. Please use below commands to compile the source files
> javac LP4Driver.java
3. Execute the files using below commands
> java LP4Driver [lp4-1.txt]
Here input.txt is an optional input file from which the graph is read
